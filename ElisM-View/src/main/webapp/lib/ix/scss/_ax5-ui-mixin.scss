/** require bourbon */
/** ax5-ui-mixin : version 1.1 */

$hack_ie67: '.';

@mixin placeholder($color: $input-color-placeholder) {
    // Firefox
    &::-moz-placeholder {
        color: $color;
        opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526
    }
    &:-ms-input-placeholder {
        color: $color;
    }
    // Internet Explorer 10+
    &::-webkit-input-placeholder {
        color: $color;
    }
    // Safari and Chrome
}

@mixin prefixer($property, $value, $prefixes) {
    @each $prefix in $prefixes {
        @if $prefix == webkit {
            @if $prefix-for-webkit {
                -webkit-#{$property}: $value;
            }
        } @else if $prefix == moz {
            @if $prefix-for-mozilla {
                -moz-#{$property}: $value;
            }
        } @else if $prefix == ms {
            @if $prefix-for-microsoft {
                -ms-#{$property}: $value;
            }
        } @else if $prefix == o {
            @if $prefix-for-opera {
                -o-#{$property}: $value;
            }
        } @else if $prefix == spec {
            @if $prefix-for-spec {
                #{$property}: $value;
            }
        } @else {
            @warn "Unrecognized prefix: #{$prefix}";
        }
    }
}

@mixin box-shadow($shadows...) {
    @include prefixer(box-shadow, $shadows, spec);
}

@mixin background-size($lengths...) {
    @include prefixer(background-size, $lengths, spec);
}

@mixin ax-border-radius($border-radius, $direction:"", $adjust:0) {
    @if (type_of($border-radius) == "list") {
        @if ($direction == "") {
            border-top-left-radius: nth($border-radius, 1)+$adjust;
            border-top-right-radius: nth($border-radius, 2)+$adjust;
            border-bottom-right-radius: nth($border-radius, 3)+$adjust;
            border-bottom-left-radius: nth($border-radius, 4)+$adjust;
        } @else if ($direction == "top") {
            border-top-left-radius: nth($border-radius, 1)+$adjust;
            border-top-right-radius: nth($border-radius, 2)+$adjust;
        } @else if ($direction == "bottom") {
            border-bottom-right-radius: nth($border-radius, 3)+$adjust;
            border-bottom-left-radius: nth($border-radius, 4)+$adjust;
        } @else if ($direction == "left") {
            border-top-left-radius: nth($border-radius, 1)+$adjust;
            border-bottom-left-radius: nth($border-radius, 4)+$adjust;
        } @else if ($direction == "right") {
            border-top-right-radius: nth($border-radius, 2)+$adjust;
            border-bottom-right-radius: nth($border-radius, 3)+$adjust;
        }
    } @else {
        @if ($direction == "") {
            border-radius: $border-radius+$adjust;
        } @else if ($direction == "top") {
            border-top-left-radius: $border-radius+$adjust;
            border-top-right-radius: $border-radius+$adjust;
        } @else if ($direction == "bottom") {
            border-bottom-left-radius: $border-radius+$adjust;
            border-bottom-right-radius: $border-radius+$adjust;
        } @else if ($direction == "left") {
            border-top-left-radius: $border-radius+$adjust;
            border-bottom-left-radius: $border-radius+$adjust;
        } @else if ($direction == "right") {
            border-top-right-radius: $border-radius+$adjust;
            border-bottom-right-radius: $border-radius+$adjust;
        }
    }
}

@mixin ax-background($pos, $g1: null, $g2: null) {

    $pos-type: type-of(nth($pos, 1));

    // If $pos is missing from mixin, reassign vars and add default position
    @if ($pos-type == color) or (nth($pos, 1) == "transparent") {
        $g2: $g1;
        $g1: $pos;
        $pos: to top;
    } @else if ($g1 == null) {
        $g1: $pos;
        $pos: to top;
    }

    // @debug($g1);
    @if (length($g1) == 2) {
        $g2: nth($g1, 2);
        $g1: nth($g1, 1);
        @include linear-gradient($pos, $g1, $g2);
    } @else if (length($g1) == 3) {
        @include linear-gradient(nth($g1, 1), nth($g1, 2), nth($g1, 3));
    } @else {
        @if (type_of(nth($g2, 1)) == color) {
            $g2: nth($g2, 1);
        }
        @include linear-gradient($pos, $g1, $g2);
    }
}

// Opacity
@mixin opacity($opacity) {
    opacity: $opacity;
    // IE8 filter
    $opacity-ie: ($opacity * 100);
    filter: alpha(opacity=$opacity-ie);
}

@mixin keyframes($name) {
    $original-prefix-for-webkit: $prefix-for-webkit;
    $original-prefix-for-mozilla: $prefix-for-mozilla;
    $original-prefix-for-microsoft: $prefix-for-microsoft;
    $original-prefix-for-opera: $prefix-for-opera;
    $original-prefix-for-spec: $prefix-for-spec;

    @if $original-prefix-for-webkit {
        @include disable-prefix-for-all();
        $prefix-for-webkit: true !global;
        @-webkit-keyframes #{$name} {
            @content;
        }
    }

    @if $original-prefix-for-mozilla {
        @include disable-prefix-for-all();
        $prefix-for-mozilla: true !global;
        @-moz-keyframes #{$name} {
            @content;
        }
    }

    $prefix-for-webkit: $original-prefix-for-webkit !global;
    $prefix-for-mozilla: $original-prefix-for-mozilla !global;
    $prefix-for-microsoft: $original-prefix-for-microsoft !global;
    $prefix-for-opera: $original-prefix-for-opera !global;
    $prefix-for-spec: $original-prefix-for-spec !global;

    @if $original-prefix-for-spec {
        @keyframes #{$name} {
            @content;
        }
    }
}

///// bourbon support

// Adds keyframes blocks for supported prefixes, removing redundant prefixes in the block's content
@mixin keyframes($name) {
    $original-prefix-for-webkit: $prefix-for-webkit;
    $original-prefix-for-mozilla: $prefix-for-mozilla;
    $original-prefix-for-microsoft: $prefix-for-microsoft;
    $original-prefix-for-opera: $prefix-for-opera;
    $original-prefix-for-spec: $prefix-for-spec;

    @if $original-prefix-for-webkit {
        @include disable-prefix-for-all();
        $prefix-for-webkit: true !global;
        @-webkit-keyframes #{$name} {
            @content;
        }
    }

    @if $original-prefix-for-mozilla {
        @include disable-prefix-for-all();
        $prefix-for-mozilla: true !global;
        @-moz-keyframes #{$name} {
            @content;
        }
    }

    $prefix-for-webkit: $original-prefix-for-webkit !global;
    $prefix-for-mozilla: $original-prefix-for-mozilla !global;
    $prefix-for-microsoft: $original-prefix-for-microsoft !global;
    $prefix-for-opera: $original-prefix-for-opera !global;
    $prefix-for-spec: $original-prefix-for-spec !global;

    @if $original-prefix-for-spec {
        @keyframes #{$name} {
            @content;
        }
    }
}

@mixin transform($property: none) {
    // none | <transform-function>
    @include prefixer(transform, $property, webkit moz ms o spec);
}

@mixin transform-origin($axes: 50%) {
    // x-axis - left | center | right  | length | %
    // y-axis - top  | center | bottom | length | %
    // z-axis -                          length
    @include prefixer(transform-origin, $axes, webkit moz ms o spec);
}

@mixin transform-style($style: flat) {
    @include prefixer(transform-style, $style, webkit moz ms o spec);
}

@mixin display($value) {
    // flex | inline-flex
    @if $value == "flex" {
        // 2009
        display: -webkit-box;
        display: -moz-box;
        display: box;

        // 2012
        display: -webkit-flex;
        display: -moz-flex;
        display: -ms-flexbox; // 2011 (IE 10)
        display: flex;
    } @else if $value == "inline-flex" {
        display: -webkit-inline-box;
        display: -moz-inline-box;
        display: inline-box;

        display: -webkit-inline-flex;
        display: -moz-inline-flex;
        display: -ms-inline-flexbox;
        display: inline-flex;
    } @else {
        display: $value;
    }
}

// 2009 - box-flex (integer)
// 2011 - flex (decimal | width decimal)
// 2012 - flex (integer integer width)
@mixin flex($value) {
    // Grab flex-grow for older browsers.
    $flex-grow: nth($value, 1);

    // 2009
    @include prefixer(box-flex, $flex-grow, webkit moz spec);

    // 2011 (IE 10), 2012
    @include prefixer(flex, $value, webkit moz ms spec);
}

// 2009 - box-orient ( horizontal | vertical | inline-axis | block-axis)
//      - box-direction (normal | reverse)
// 2011 - flex-direction (row | row-reverse | column | column-reverse)
// 2012 - flex-direction (row | row-reverse | column | column-reverse)
@mixin flex-direction($value: row) {
    // Alt values.
    $value-2009: $value;
    $value-2011: $value;
    $direction: normal;

    @if $value == row {
        $value-2009: horizontal;
    } @else if $value == "row-reverse" {
        $value-2009: horizontal;
        $direction: reverse;
    } @else if $value == column {
        $value-2009: vertical;
    } @else if $value == "column-reverse" {
        $value-2009: vertical;
        $direction: reverse;
    }

    // 2009
    @include prefixer(box-orient, $value-2009, webkit moz spec);
    @include prefixer(box-direction, $direction, webkit moz spec);

    // 2012
    @include prefixer(flex-direction, $value, webkit moz spec);

    // 2011 (IE 10)
    -ms-flex-direction: $value;
}

// 2009 - box-lines (single | multiple)
// 2011 - flex-wrap (nowrap | wrap | wrap-reverse)
// 2012 - flex-wrap (nowrap | wrap | wrap-reverse)
@mixin flex-wrap($value: nowrap) {
    // Alt values
    $alt-value: $value;
    @if $value == nowrap {
        $alt-value: single;
    } @else if $value == wrap {
        $alt-value: multiple;
    } @else if $value == "wrap-reverse" {
        $alt-value: multiple;
    }

    @include prefixer(box-lines, $alt-value, webkit moz spec);
    @include prefixer(flex-wrap, $value, webkit moz ms spec);
}

// 2009 - TODO: parse values into flex-direction/flex-wrap
// 2011 - TODO: parse values into flex-direction/flex-wrap
// 2012 - flex-flow (flex-direction || flex-wrap)
@mixin flex-flow($value) {
    @include prefixer(flex-flow, $value, webkit moz spec);
}

// 2009 - box-ordinal-group (integer)
// 2011 - flex-order (integer)
// 2012 - order (integer)
@mixin order($int: 0) {
    // 2009
    @include prefixer(box-ordinal-group, $int, webkit moz spec);

    // 2012
    @include prefixer(order, $int, webkit moz spec);

    // 2011 (IE 10)
    -ms-flex-order: $int;
}

// 2012 - flex-grow (number)
@mixin flex-grow($number: 0) {
    @include prefixer(flex-grow, $number, webkit moz spec);
    -ms-flex-positive: $number;
}

// 2012 - flex-shrink (number)
@mixin flex-shrink($number: 1) {
    @include prefixer(flex-shrink, $number, webkit moz spec);
    -ms-flex-negative: $number;
}

// 2012 - flex-basis (number)
@mixin flex-basis($width: auto) {
    @include prefixer(flex-basis, $width, webkit moz spec);
    -ms-flex-preferred-size: $width;
}

// Shorthand mixin. Supports multiple parentheses-deliminated values for each variable.
// Example: @include transition (all 2s ease-in-out);
//          @include transition (opacity 1s ease-in 2s, width 2s ease-out);
//          @include transition-property (transform, opacity);

@mixin transition($properties...) {
    // Fix for vendor-prefix transform property
    $needs-prefixes: false;
    $webkit: ();
    $moz: ();
    $spec: ();

    // Create lists for vendor-prefixed transform
    @each $list in $properties {
        @if nth($list, 1) == "transform" {
            $needs-prefixes: true;
            $list1: -webkit-transform;
            $list2: -moz-transform;
            $list3: ();

            @each $var in $list {
                $list3: join($list3, $var);

                @if $var != "transform" {
                    $list1: join($list1, $var);
                    $list2: join($list2, $var);
                }
            }

            $webkit: append($webkit, $list1);
            $moz: append($moz, $list2);
            $spec: append($spec, $list3);
        } @else {
            $webkit: append($webkit, $list, comma);
            $moz: append($moz, $list, comma);
            $spec: append($spec, $list, comma);
        }
    }

    @if $needs-prefixes {
        -webkit-transition: $webkit;
        -moz-transition: $moz;
        transition: $spec;
    } @else {
        @if length($properties) >= 1 {
            @include prefixer(transition, $properties, webkit moz spec);
        } @else {
            $properties: all 0.15s ease-out 0s;
            @include prefixer(transition, $properties, webkit moz spec);
        }
    }
}

@mixin transition-property($properties...) {
    -webkit-transition-property: transition-property-names($properties, "webkit");
    -moz-transition-property: transition-property-names($properties, "moz");
    transition-property: transition-property-names($properties, false);
}

@mixin transition-duration($times...) {
    @include prefixer(transition-duration, $times, webkit moz spec);
}

@mixin transition-timing-function($motions...) {
    // ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier()
    @include prefixer(transition-timing-function, $motions, webkit moz spec);
}

@mixin transition-delay($times...) {
    @include prefixer(transition-delay, $times, webkit moz spec);
}

// http://www.w3.org/TR/css3-animations/#the-animation-name-property-
// Each of these mixins support comma separated lists of values, which allows different transitions for individual properties to be described in a single style rule. Each value in the list corresponds to the value at that same position in the other properties.

@mixin animation($animations...) {
    @include prefixer(animation, $animations, webkit moz spec);
}

@mixin animation-name($names...) {
    @include prefixer(animation-name, $names, webkit moz spec);
}

@mixin animation-duration($times...) {
    @include prefixer(animation-duration, $times, webkit moz spec);
}

@mixin animation-timing-function($motions...) {
    // ease | linear | ease-in | ease-out | ease-in-out
    @include prefixer(animation-timing-function, $motions, webkit moz spec);
}

@mixin animation-iteration-count($values...) {
    // infinite | <number>
    @include prefixer(animation-iteration-count, $values, webkit moz spec);
}

@mixin animation-direction($directions...) {
    // normal | alternate
    @include prefixer(animation-direction, $directions, webkit moz spec);
}

@mixin animation-play-state($states...) {
    // running | paused
    @include prefixer(animation-play-state, $states, webkit moz spec);
}

@mixin animation-delay($times...) {
    @include prefixer(animation-delay, $times, webkit moz spec);
}

@mixin animation-fill-mode($modes...) {
    // none | forwards | backwards | both
    @include prefixer(animation-fill-mode, $modes, webkit moz spec);
}
